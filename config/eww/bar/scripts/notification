#!/bin/bash

#dependencies = jq

NOTIF_LOG="$HOME/.cache/notification.json"
TMP_NOTIF_LOG="/tmp/notification_temp.json"
SLEEP=5

create_cache(){
    urgency=""
    ignored_app=("changeVolume", "changeBrightness") # add your ignored app
    timestamp=`date +%s`

    case "$DUNST_URGENCY" in
        "LOW"|"NORMAL"|"CRITICAL") urgency=$DUNST_URGENCY ;;
        *) urgency="OTHER" ;;
    esac

    if [[ ! "${ignored_app[*]}" =~ "$DUNST_APP_NAME" ]]; then
        json='{
            "id": "'$DUNST_ID'",
            "appname": "'$DUNST_APP_NAME'",
            "summary": "'$DUNST_SUMMARY'",
            "body": "'$DUNST_BODY'",
            "timestamp": '$timestamp',
            "urgency": "'$urgency'"
        }'

        if [[ ! -s $NOTIF_LOG ]]; then
            echo $json | jq '.' | jq -s > $NOTIF_LOG
        else
            eval cp $NOTIF_LOG $TMP_NOTIF_LOG
            eval cat $TMP_NOTIF_LOG | jq " . |= [$json] +." > $NOTIF_LOG
        fi
    fi
}

monitor(){
    # if [[ "$(cat $NOTIF_LOG | jq 'length')" >= "1" ]]; then
    # 	make_literal
    # fi
    make_literal
    while sleep $SLEEP; do
        if [[ -s $NOTIF_LOG ]]; then
            if [[ "$(cat $NOTIF_LOG | jq 'length')" == "1" ]]; then
                make_literal
            else
                oldline=`cat $TMP_NOTIF_LOG | jq '.[0].timestamp'`
                newline=`cat $NOTIF_LOG | jq '.[0].timestamp'`

                if [[ $newline != $oldline ]]; then
                    make_literal
                    eval cp $NOTIF_LOG $TMP_NOTIF_LOG
                fi
            fi
        else
            echo "(box :class \"notif-empty\" :orientation \"v\" :space-evenly false :vexpand \"false\" :hexpand \"false\" (label :halign \"center\" :text \"Notification Empty\"))"
        fi
    done
}

make_literal(){
    widget=("box :class \"notif-child\" :orientation \"v\" :space-evenly false :vexpand \"false\" :hexpand \"false\" ")
    notif_length=`cat $NOTIF_LOG | jq 'length'`
    MAX_NOTIF=4 #max notif count in widget

    if [[ ! -z $notif_length ]]; then
        if [[ $notif_length -lt $MAX_NOTIF ]]; then
            MAX_NOTIF=$notif_length
        else
            MAX_NOTIF=$MAX_NOTIF
        fi
    fi

    for (( i = 0 ; i < $MAX_NOTIF ; i++ )); do
        appname=`cat $NOTIF_LOG | jq "[.[] | select(.appname)][$i].appname"`
        summary=`cat $NOTIF_LOG | jq "[.[] | select(.appname)][$i].summary"`
        body=`cat $NOTIF_LOG | jq "[.[] | select(.appname)][$i].body"`
        notif_time=`cat $NOTIF_LOG | jq "[.[] | select(.appname)][$i].timestamp"`
        notif_time=`date -d @$notif_time +'%H:%M'`

        # Without app icon
        widget+=("(box :class \"notif-item\" :orientation \"v\" :space-evenly false :vexpand \"false\" :hexpand \"false\" (box :class \"notif-info\" :orientation \"v\" :space-evenly false :vexpand \"false\" :hexpand \"false\" (label :class \"notif-appname\" :halign \"start\" :text $appname )(label :class \"notif-summary\" :halign \"start\" :wrap \"true\" :limit-width 100 :text $summary)(label :class \"notif-body\" :halign \"start\" :wrap \"true\" :limit-width 100 :text $body :visible {strlength($body) > 0 ? true : false}))(box :orientation \"h\" :space-evenly true :vexpand \"true\" :hexpand \"false\" (label :class \"notif-time\" :halign \"end\" :wrap \"true\" :limit-width 100 :text \"$notif_time\")))")

        # With app icon
        # widget+=("(box :class \"notif-item\" :orientation \"h\" :space-evenly false :vexpand \"false\" :hexpand \"false\" (box :class \"notif-icon\" :space-evenly false :vexpand \"false\" :hexpand \"false\" :style \"background-image: url('assets/images/cover.jpg');\")(box :class \"notif-info\" :orientation \"v\" :space-evenly false :vexpand \"false\" :hexpand \"false\" (label :class \"notif-appname\" :halign \"start\" :text $appname )(label :class \"notif-summary\" :halign \"start\" :wrap \"true\" :limit-width 100 :text $summary)(label :class \"notif-body\" :halign \"start\" :wrap \"true\" :limit-width 100 :text $body)))")
    done

    echo "($(IFS=; echo "${widget[*]}"))"
}

clear_notif(){
    eval rm -rf $NOTIF_LOG
    eval rm -rf $TMP_NOTIF_LOG

    eval touch $NOTIF_LOG
    eval touch $TMP_NOTIF_LOG
}

{
    case $1 in
        "--monitor") monitor ;;
        "--make") make_literal ;;
        "--clear") clear_notif ;;
        *) create_cache ;;
    esac
}
